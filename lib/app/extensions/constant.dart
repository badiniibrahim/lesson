//TO DO: add the entitlement ID from the RevenueCat dashboard that is activated upon successful in-app purchase for the duration of the purchase.
import 'package:get/get.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

const entitlementID = 'premium';

//TO DO: add your subscription terms and conditions
const footerText =
    """Don't forget to add your subscription terms and conditions. 

Read more about this here: https://www.revenuecat.com/blog/schedule-2-section-3-8-b""";

//TO DO: add the Apple API key for your app from the RevenueCat dashboard: https://app.revenuecat.com
const appleApiKey = 'appl_ZjxJQCXxulRNXonlehJIuczWwHy';

//TO DO: add the Google API key for your app from the RevenueCat dashboard: https://app.revenuecat.com
const googleApiKey = 'goog_WEDlYZUfzobnlNfXbORSmoJGFsF';

//TO DO: add the Amazon API key for your app from the RevenueCat dashboard: https://app.revenuecat.com
const amazonApiKey = 'amazon_api_key';

List<Map<String, dynamic>> selectTravelsList = [
  {
    'id': 1,
    'title': 'travelers_me'.tr,
    'desc': 'travelers_me_desc'.tr,
    'icon': 'assets/animations/me.json',
    'people': '1',
  },
  {
    'id': 2,
    'title': 'travelers_couple'.tr,
    'desc': 'travelers_couple_des'.tr,
    'icon': 'assets/animations/couple.json',
    'people': '2 People',
  },
  {
    'id': 3,
    'title': 'travelers_family'.tr,
    'desc': 'travelers_family_desc'.tr,
    'icon': 'assets/animations/family1.json',
    'people': '3 to 5 People',
  },
  {
    'id': 4,
    'title': 'travelers_friends'.tr,
    'desc': 'travelers_friends_desc'.tr,
    'icon': 'assets/animations/friends.json',
    'people': '5 to 10 People',
  },
];

List<Map<String, dynamic>> selectBudgetOptions = [
  {
    "id": 1,
    "title": "budget_cheap".tr,
    "desc": "budget_cheap_des".tr,
    'icon': 'assets/animations/cheap.json',
  },
  {
    "id": 2,
    "title": "budget_moderate".tr,
    "desc": "budget_moderate_des".tr,
    'icon': 'assets/animations/moderate.json',
  },
  {
    "id": 3,
    "title": "budget_luxury".tr,
    "desc": "budget_luxury_des".tr,
    'icon': 'assets/animations/luxury.json',
  },
];

const List<Map<String, dynamic>> activityOptions = [
  {
    "id": 1,
    "title": "Cheap",
    "desc": "Stay conscious of costs",
    'icon': 'assets/animations/cheap.json',
  },
  {
    "id": 2,
    "title": "Moderate",
    "desc": "Keep cost on the average side",
    'icon': 'assets/animations/moderate.json',
  },
  {
    "id": 3,
    "title": "Luxury",
    "desc": "Dont worry about cost",
    'icon': 'assets/animations/luxury.json',
  },
];

final String topicPrompt =
    "As a Coaching Teacher The user wants to learn about a topic. Generate 5-7 short course titles for study. Ensure they are relevant to the description. Output should be an array of strings in JSON format only. Do not include any plain text in the output.";

final String baseUrl = "https://places.googleapis.com/v1/places:searchText";

final String coursePrompt = """"  
As you are coaching teacher
    - User want to learn about all topics
    - Create 2 Courses With Course Name, Description, and 5/8 Chapters in each course
    - Make sure to add chapters 
    - List Content in each chapter along with Description in 5 to 8 lines
    - Do not Just Explain what chapter about, Explain in Detail with Example
    - Also Make Easy, Moderate and Advance Course depends on topics
    - Add CourseBanner Image from ('/banner1.png','/banner2.png','/banner3.png','/banner4.png','/banner5.png','/banner6.png'), select It randomly
    - Explain the chapter content as detailed tutorial with list of content
    - Generate 10 Quizz, 10 Flashcard and 10 Questions answer
    - Tag each course to one of the categorty from :["Tech & Coding","Business & Finance","Health & Fitness","Science & Engineering","Arts & Creativity"]
    - Output in JSON Format only 
    -  "courses": [
  {
    "courseTitle": '<Intro to Python>',
    "description": '',
    "banner_image": "/banner1.png",
    "category":"",
    "chapters": [
      {
        chapterName: '',
        content: [
          {
            topic: '<Topic Name in 2 to 4 worlds ex.(Creating Variables)>'
            explain: '< Detailed Explaination in 5 to 8 Lines if required>',
            code: '<Code example of required else null',
            example: '< example of required else null'
          },
          
            ...
          
        ]
      }
    ],
    quiz:[
      {
        question:'',
        options:['a',b,c,d],
        correctAns:''
      }
    ],
    flashcards:[
      {
        front:'',
        back:''
      }
    ],
    qa:[
      {
        question:'',
        answer:''
      }
    ]
  }
]
 """;

final topicHistory = [
  Content.multi([
    TextPart(
        'Learn Python: As a Coaching Teacher\n- The user wants to learn about a topic.\n- Generate 5-7 short course titles for study.\n- Ensure they are relevant to the description.\n- Output should be an array of strings in JSON format only.\n - Do not include any plain text in the output.'),
  ]),
  Content.model([
    TextPart(
        '```json\n{\n  "course_titles": [\n    "Python Fundamentals: A Beginner\'s Journey",\n    "Data Structures in Python: Lists, Dictionaries, and More",\n    "Object-Oriented Programming with Python: Concepts and Applications",\n    "Python for Data Analysis: Introduction to Pandas",\n    "Web Development with Python: Building a Simple Web App",\n    "Automating Tasks with Python: Scripting and Automation",\n    "Python Algorithms: Problem Solving and Optimization"\n  ]\n}\n```'),
  ]),
];

final courseHistory = [
  Content.multi([
    TextPart(
        '[Python for Beginners, Intermediate Python, Advanced Python] As you are coaching teacher\n    - User want to learn about all topics\n    - Create 2 Courses With Course Name, Description, and 5/8 Chapters in each course\n    - Make sure to add chapters \n    - List Content in each chapter along with Description in 5 to 8 lines\n    - Do not Just Explain what chapter about, Explain in Detail with Example\n    - Also Make Easy, Moderate and Advance Course depends on topics\n    - Add CourseBanner Image from (\'/banner1.png\',\'/banner2.png\',\'/banner3.png\',\'/banner4.png\',\'/banner5.png\',\'/banner6.png\'), select It randomly\n    - Explain the chapter content as detailed tutorial with list of content\n    - Generate 10 Quizz, 10 Flashcard and 10 Questions answer\n    - Tag each course to one of the categorty from :["Tech & Coding","Business & Finance","Health & Fitness","Science & Engineering","Arts & Creativity"]\n    - Output in JSON Format only \n    -  "courses": [\n  {\n    "courseTitle": \'<Intro to Python>\',\n    "description": \'\',\n    "banner_image": "/banner1.png",\n    "category":"",\n    "chapters": [\n      {\n        chapterName: \'\',\n        content: [\n          {\n            topic: \'<Topic Name in 2 to 4 worlds ex.(Creating Variables)>\'\n            explain: \'< Detailed Explaination in 5 to 8 Lines if required>\',\n            code: \'<Code example of required else null\',\n            example: \'< example of required else null\'\n          },\n          \n            ...\n          \n        ]\n      }\n    ],\n    quiz:[\n      {\n        question:\'\',\n        options:[\'a\',b,c,d],\n        correctAns:\'\'\n      }\n    ],\n    flashcards:[\n      {\n        front:\'\',\n        back:\'\'\n      }\n    ],\n    qa:[\n      {\n        question:\'\',\n        answer:\'\'\n      }\n    ]\n  }\n]'),
  ]),
  Content.model([
    TextPart(
        '```json\n{\n  "courses": [\n    {\n      "courseTitle": "Python Fundamentals: A Beginner\'s Journey",\n      "description": "This course is designed for absolute beginners with no prior programming experience. It covers the fundamental concepts of Python programming, including data types, control flow, functions, and basic input/output operations. By the end of this course, you\'ll be able to write simple Python programs and understand the basics of programming logic. We will focus on building a solid foundation through hands-on exercises and real-world examples. This course emphasizes clear explanations and practical application.",\n      "banner_image": "/banner2.png",\n      "category": "Tech & Coding",\n      "chapters": [\n        {\n          "chapterName": "Introduction to Python and Setup",\n          "content": [\n            {\n              "topic": "What is Python?",\n              "explain": "Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with its use of significant indentation. Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (procedural), object-oriented, and functional programming.  We\'ll explore its key features and why it\'s a great language to start with. Python\'s versatility and large community support make it an excellent choice for beginners and experienced developers alike.",\n              "code": null,\n              "example": null\n            },\n            {\n              "topic": "Installing Python and Setting up an IDE",\n              "explain": "This section guides you through the process of installing Python on your system (Windows, macOS, or Linux). We\'ll then set up a suitable Integrated Development Environment (IDE), such as VS Code, PyCharm, or IDLE. We will also cover how to configure the IDE for optimal Python development. Finally, we\'ll verify the installation by running a simple \\"Hello, World!\\" program. Correct setup is crucial for a smooth learning experience.",\n              "code": null,\n              "example": null\n            },\n            {\n              "topic": "Running Your First Python Program",\n              "explain": "We\'ll create a simple \'Hello, World!\' program and execute it using the command line and the chosen IDE. This will demonstrate the basic syntax of Python and how to run a program from the terminal. We\'ll also discuss common errors and how to troubleshoot them. Understanding how to execute code is fundamental to programming. We\'ll look at different ways to run your python code.",\n              "code": "print(\\"Hello, World!\\")",\n              "example": null\n            },\n            {\n              "topic": "Understanding Python Syntax",\n              "explain": "This topic will introduce the basic syntax rules of Python, including indentation, comments, and how to write clear and readable code. Proper indentation is crucial in Python as it defines code blocks. We\'ll also learn about writing comments to explain our code. Adhering to syntax rules ensures your code is interpreted correctly by the Python interpreter. It covers naming conventions, string representation, and basic error handling.",\n              "code": null,\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Variables, Data Types, and Operators",\n          "content": [\n            {\n              "topic": "Creating Variables",\n              "explain": "In Python, a variable is a named storage location that holds a value. Variables are dynamically typed, meaning you don\'t need to explicitly declare their type. We will learn how to assign values to variables using the assignment operator (=) and how to choose meaningful variable names. Python uses snake_case naming convention. Variables are essential for storing and manipulating data in your programs.",\n              "code": "name = \\"Alice\\"\\nage = 30\\npi = 3.14159",\n              "example": null\n            },\n            {\n              "topic": "Common Data Types",\n              "explain": "Python has several built-in data types, including integers (int), floating-point numbers (float), strings (str), and booleans (bool). We\'ll explore each of these data types in detail, including their properties and how to use them. Understanding data types is essential for working with different kinds of data in your programs. Lists, dictionaries, and tuples are also introduced.",\n              "code": "x = 10 # integer\\ny = 2.5 # float\\nmessage = \\"Hello\\" # string\\nis_valid = True # boolean",\n              "example": null\n            },\n            {\n              "topic": "Arithmetic Operators",\n              "explain": "Python provides a variety of arithmetic operators for performing mathematical operations, including addition (+), subtraction (-), multiplication (*), division (/), floor division (//), modulus (%), and exponentiation (**). We\'ll learn how to use these operators to perform calculations and solve mathematical problems. Operator precedence is also discussed and covered in this section, so that math is handled accurately.",\n              "code": "result = 5 + 3 # addition\\ndifference = 10 - 2 # subtraction\\nproduct = 4 * 6 # multiplication\\nquotient = 20 / 5 # division",\n              "example": null\n            },\n            {\n              "topic": "Comparison and Logical Operators",\n              "explain": "Comparison operators (==, !=, >, <, >=, <=) are used to compare values and return a boolean result. Logical operators (and, or, not) are used to combine boolean expressions. We\'ll learn how to use these operators to make decisions in our programs. Understanding logic is crucial for implementing control flow.",\n              "code": "x = 5\\ny = 10\\n\\nprint(x == y) # False\\nprint(x < y)  # True\\nprint(x > 3 and y < 20) # True",\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Control Flow: Making Decisions",\n          "content": [\n            {\n              "topic": "If Statements",\n              "explain": "The `if` statement allows you to execute a block of code only if a certain condition is true. We\'ll learn how to use the `if` statement to make decisions in our programs. Conditions are evaluated, and based on true/false, execution proceeds to the appropriate section of code. Conditional statements are fundamental to programming logic.",\n              "code": "age = 20\\nif age >= 18:\\n    print(\\"You are an adult.\\")",\n              "example": null\n            },\n            {\n              "topic": "Else and Elif Statements",\n              "explain": "The `else` statement provides an alternative block of code to execute if the `if` condition is false. The `elif` statement (else if) allows you to check multiple conditions in sequence. We\'ll explore how to use these statements to create more complex decision-making structures. This helps handle multiple possible scenarios.",\n              "code": "age = 15\\nif age >= 18:\\n    print(\\"You are an adult.\\")\\nelif age >= 13:\\n    print(\\"You are a teenager.\\")\\nelse:\\n    print(\\"You are a child.\\")",\n              "example": null\n            },\n            {\n              "topic": "Nested If Statements",\n              "explain": "You can nest `if` statements inside other `if` statements to create more complex decision-making structures. This allows you to check multiple conditions in a hierarchical manner. Nested structures must be carefully implemented to maintain readability and logic. However, keep the complexity in mind to avoid logical pitfalls.",\n              "code": "x = 10\\ny = 5\\n\\nif x > 0:\\n    if y > 0:\\n        print(\\"Both x and y are positive.\\")\\n    else:\\n        print(\\"x is positive, but y is not.\\")\\nelse:\\n    print(\\"x is not positive.\\")",\n              "example": null\n            },\n            {\n              "topic": "Truthiness and Falsiness",\n              "explain": "In Python, certain values are considered \\"truthy\\" (evaluate to True in a boolean context) and others are considered \\"falsy\\" (evaluate to False). Understanding truthiness and falsiness can simplify conditional statements. Example: empty string will evaluate to false.",\n              "code": "if \\"hello\\":\\n  print(\\"This will print\\")\\nif \\"\\":\\n  print(\\"This will not print\\")",\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Loops: Repeating Tasks",\n          "content": [\n            {\n              "topic": "For Loops",\n              "explain": "The `for` loop is used to iterate over a sequence (e.g., a list, tuple, string). We\'ll learn how to use the `for` loop to repeat a block of code for each item in the sequence. Loop counter can be explicit, or implicit. For loops are essential for processing collections of data.",\n              "code": "fruits = [\\"apple\\", \\"banana\\", \\"cherry\\"]\\nfor fruit in fruits:\\n    print(fruit)",\n              "example": null\n            },\n            {\n              "topic": "While Loops",\n              "explain": "The `while` loop is used to repeat a block of code as long as a certain condition is true. We\'ll learn how to use the `while` loop to repeat a block of code until a specific condition is met. Ensure the condition eventually becomes false to avoid infinite loops. Useful when you do not know how many iterations it should run in advance.",\n              "code": "count = 0\\nwhile count < 5:\\n    print(count)\\n    count += 1",\n              "example": null\n            },\n            {\n              "topic": "Break and Continue Statements",\n              "explain": "The `break` statement is used to exit a loop prematurely. The `continue` statement is used to skip the current iteration of a loop and continue to the next iteration. These statements provide control over the loop\'s execution flow. Useful in error handling or edge case considerations.",\n              "code": "numbers = [1, 2, 3, 4, 5]\\nfor number in numbers:\\n    if number == 3:\\n        break  # Exit the loop when number is 3\\n    print(number)\\n\\nfor number in numbers:\\n    if number == 3:\\n        continue # Skip the number 3\\n    print(number)",\n              "example": null\n            },\n            {\n              "topic": "Looping with `range()`",\n              "explain": "The `range()` function generates a sequence of numbers. We\'ll learn how to use `range()` with `for` loops to iterate a specific number of times. This is a common technique for repeating a task a known number of times. `range()` takes start, stop, and step parameters.",\n              "code": "for i in range(5):\\n    print(i)",\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Functions: Reusable Code Blocks",\n          "content": [\n            {\n              "topic": "Defining Functions",\n              "explain": "A function is a reusable block of code that performs a specific task. We\'ll learn how to define functions using the `def` keyword. This includes specifying the function name, parameters (inputs), and the function body (the code to be executed). Functions promote code reusability and modularity.",\n              "code": "def greet(name):\\n    print(\\"Hello, \\" + name + \\"!\\")",\n              "example": null\n            },\n            {\n              "topic": "Calling Functions",\n              "explain": "Once a function is defined, you can call it by using its name followed by parentheses. If the function takes parameters, you must provide the appropriate arguments when calling it. Calling functions executes the code within their body. Correctly using the parameters ensure the code is executed accurately.",\n              "code": "greet(\\"Alice\\")  # Calls the greet function with the argument \'Alice\'",\n              "example": null\n            },\n            {\n              "topic": "Function Arguments and Parameters",\n              "explain": "Parameters are variables that receive values when a function is called. Arguments are the actual values passed to the function. We\'ll explore different types of arguments, including positional arguments, keyword arguments, and default arguments. Understanding argument passing is essential for using functions effectively. Function arguments are also used to pass the same data to different functions.",\n              "code": "def add(x, y):\\n    return x + y\\n\\nresult = add(5, 3) # Positional arguments\\nresult = add(y=3, x=5) # Keyword arguments\\n\\ndef power(base, exponent=2):\\n    return base ** exponent # exponent has a default value of 2",\n              "example": null\n            },\n            {\n              "topic": "Return Values",\n              "explain": "A function can return a value using the `return` statement. The returned value can be used in other parts of the program. If a function doesn\'t have a `return` statement, it implicitly returns `None`. Return values are essential for functions to produce results. Returning more than one value is also possible in Python with tuple packing and unpacking.",\n              "code": "def square(x):\\n    return x * x\\n\\nresult = square(4) # result will be 16",\n              "example": null\n            }\n          ]\n        }\n      ],\n      "quiz": [\n        {\n          "question": "What is the output of `print(2 + 2 * 2)`?",\n          "options": ["4", "6", "8", "10"],\n          "correctAns": "6"\n        },\n        {\n          "question": "Which of the following is a valid variable name in Python?",\n          "options": ["1variable", "my-variable", "my_variable", "my variable"],\n          "correctAns": "my_variable"\n        },\n        {\n          "question": "What data type is `True` in Python?",\n          "options": ["int", "float", "string", "bool"],\n          "correctAns": "bool"\n        },\n        {\n          "question": "What does the `%` operator do in Python?",\n          "options": ["Division", "Exponentiation", "Modulus", "Multiplication"],\n          "correctAns": "Modulus"\n        },\n        {\n          "question": "Which statement is used to execute a block of code only if a certain condition is true?",\n          "options": ["for", "while", "if", "else"],\n          "correctAns": "if"\n        },\n        {\n          "question": "Which loop is used to iterate over a sequence?",\n          "options": ["if", "while", "for", "else"],\n          "correctAns": "for"\n        },\n        {\n          "question": "Which statement is used to exit a loop prematurely?",\n          "options": ["continue", "break", "pass", "return"],\n          "correctAns": "break"\n        },\n        {\n          "question": "What keyword is used to define a function in Python?",\n          "options": ["function", "def", "func", "define"],\n          "correctAns": "def"\n        },\n        {\n          "question": "What does a function return if there is no explicit `return` statement?",\n          "options": ["0", "None", "Error", "Null"],\n          "correctAns": "None"\n        },\n        {\n          "question": "What is the output of `print(type([1, 2, 3]))`?",\n          "options": ["<class \'tuple\'>", "<class \'set\'>", "<class \'list\'>", "<class \'array\'>"],\n          "correctAns": "<class \'list\'>"\n        }\n      ],\n      "flashcards": [\n        {\n          "front": "Variable",\n          "back": "Named storage location that holds a value"\n        },\n        {\n          "front": "Data Type",\n          "back": "Specifies the type of value a variable can hold"\n        },\n        {\n          "front": "If Statement",\n          "back": "Executes a block of code if a condition is true"\n        },\n        {\n          "front": "For Loop",\n          "back": "Iterates over a sequence"\n        },\n        {\n          "front": "While Loop",\n          "back": "Repeats a block of code as long as a condition is true"\n        },\n        {\n          "front": "Function",\n          "back": "Reusable block of code"\n        },\n        {\n          "front": "Return Value",\n          "back": "Value returned by a function"\n        },\n        {\n          "front": "Indentation",\n          "back": "Used to define code blocks in Python"\n        },\n        {\n          "front": "Comment",\n          "back": "Used to explain code and is ignored by the interpreter"\n        },\n        {\n          "front": "Boolean",\n          "back": "A data type that can have the value True or False"\n        }\n      ],\n      "qa": [\n        {\n          "question": "What is the difference between `==` and `=` in Python?",\n          "answer": "`==` is the equality operator (checks if two values are equal), while `=` is the assignment operator (assigns a value to a variable)."\n        },\n        {\n          "question": "How do you write a comment in Python?",\n          "answer": "You write a comment using the `#` symbol. Anything after the `#` on the same line is considered a comment."\n        },\n        {\n          "question": "What is the purpose of indentation in Python?",\n          "answer": "Indentation is used to define code blocks (e.g., within if statements, loops, functions). Proper indentation is crucial for Python code to be interpreted correctly."\n        },\n        {\n          "question": "What is the difference between `break` and `continue`?",\n          "answer": "`break` exits the loop entirely, while `continue` skips the current iteration and proceeds to the next one."\n        },\n        {\n          "question": "What is a function\'s purpose?",\n          "answer": "A function is a reusable block of code that performs a specific task, making code more organized and easier to maintain."\n        },\n        {\n          "question": "How do you call a function in Python?",\n          "answer": "You call a function by using its name followed by parentheses, e.g., `my_function()`."\n        },\n        {\n          "question": "What are some common data types in Python?",\n          "answer": "Common data types include integers (int), floating-point numbers (float), strings (str), and booleans (bool)."\n        },\n        {\n          "question": "What is the purpose of the `range()` function?",\n          "answer": "The `range()` function generates a sequence of numbers, which is often used in `for` loops to iterate a specific number of times."\n        },\n        {\n          "question": "How do you check the data type of a variable in Python?",\n          "answer": "You can use the `type()` function to check the data type of a variable, e.g., `type(my_variable)`."\n        },\n        {\n          "question": "What is the difference between a positional argument and a keyword argument?",\n          "answer": "Positional arguments are passed to a function based on their order, while keyword arguments are passed using the parameter name, e.g., `my_function(name=\'Alice\', age=30)`."\n        }\n      ]\n    },\n    {\n      "courseTitle": "Intermediate Python: Data Structures and Object-Oriented Programming",\n      "description": "This course builds upon the foundational knowledge gained in the beginner\'s course and delves into more advanced topics. Students will learn about essential data structures like lists, dictionaries, tuples, and sets, and how to use them effectively. The course also introduces object-oriented programming (OOP) concepts, including classes, objects, inheritance, and polymorphism. By the end of this course, you\'ll be able to write more complex Python programs and leverage the power of OOP.",\n      "banner_image": "/banner5.png",\n      "category": "Tech & Coding",\n      "chapters": [\n        {\n          "chapterName": "Lists: Ordered Collections",\n          "content": [\n            {\n              "topic": "Creating and Accessing Lists",\n              "explain": "Lists are ordered, mutable collections of items. We\'ll learn how to create lists, access elements by index, and modify list elements. List indices start at 0 and can be accessed by [index]. Lists are very flexible and can contain data of different types in them. Negative indices are also available.",\n              "code": "my_list = [1, 2, 3, \\"hello\\", 3.14]\\nprint(my_list[0]) # Output: 1\\nmy_list[1] = 5 # Modifies the second element",\n              "example": null\n            },\n            {\n              "topic": "List Methods",\n              "explain": "Python provides a variety of built-in list methods for manipulating lists, including `append()`, `insert()`, `remove()`, `pop()`, `sort()`, and `reverse()`. We\'ll explore these methods and how to use them to efficiently manage list data. List methods change the lists in-place. `append` to add an element at the end, `insert` to insert to a particular index, `remove` deletes, `pop` removes the last element, `sort` sorts the list, `reverse` reverse the order of list.",\n              "code": "my_list = [1, 2, 3]\\nmy_list.append(4) # Adds 4 to the end\\nmy_list.insert(1, 5) # Inserts 5 at index 1\\nmy_list.remove(2) # Removes the first occurrence of 2\\nmy_list.pop()  # Removes and returns last element",\n              "example": null\n            },\n            {\n              "topic": "List Comprehensions",\n              "explain": "List comprehensions provide a concise way to create new lists based on existing lists. They offer a more readable and efficient alternative to traditional `for` loops. It will transform one list to another list by applying a function to each of its elements. We\'ll learn how to use list comprehensions to generate lists based on specific criteria.",\n              "code": "numbers = [1, 2, 3, 4, 5]\\nsquares = [x**2 for x in numbers] # Creates a list of squares",\n              "example": null\n            },\n            {\n              "topic": "Slicing Lists",\n              "explain": "Slicing allows you to extract a portion of a list into a new list. Slicing uses the start:stop:step notation. This provides a powerful mechanism for working with subsets of lists. We\'ll cover how to use slicing to create sublists and perform other operations on list segments.",\n              "code": "my_list = [1, 2, 3, 4, 5]\\nsub_list = my_list[1:4] # Creates a sublist [2, 3, 4]",\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Dictionaries: Key-Value Pairs",\n          "content": [\n            {\n              "topic": "Creating and Accessing Dictionaries",\n              "explain": "Dictionaries are unordered collections of key-value pairs. Keys must be unique and immutable, while values can be of any data type. We\'ll learn how to create dictionaries, access values using keys, and add or modify key-value pairs. Dictionaries are useful for storing and retrieving data based on unique identifiers. Using dictionaries is quick as it uses a hash table.",\n              "code": "my_dict = {\\"name\\": \\"Alice\\", \\"age\\": 30}\\nprint(my_dict[\\"name\\"]) # Output: Alice\\nmy_dict[\\"city\\"] = \\"New York\\" # Adds a new key-value pair",\n              "example": null\n            },\n            {\n              "topic": "Dictionary Methods",\n              "explain": "Python provides several built-in dictionary methods for managing dictionaries, including `get()`, `keys()`, `values()`, `items()`, and `pop()`. We\'ll explore these methods and how to use them effectively. Common operations on Dictionaries. `get` is for accessing keys safely, returning a default if the key doesn\'t exist. `keys()` for extracting all keys and `values()` for extracting all values.",\n              "code": "my_dict = {\\"name\\": \\"Alice\\", \\"age\\": 30}\\nprint(my_dict.get(\\"name\\")) # Safely gets the value for \\"name\\"\\nprint(my_dict.keys())    # Returns a view of all keys\\nprint(my_dict.values())  # Returns a view of all values",\n              "example": null\n            },\n            {\n              "topic": "Iterating Through Dictionaries",\n              "explain": "You can iterate through dictionaries using `for` loops to access keys, values, or both. We\'ll explore different ways to iterate through dictionaries and process their contents. Looping through the `.items()` method is used to get key and value.",\n              "code": "my_dict = {\\"name\\": \\"Alice\\", \\"age\\": 30}\\nfor key, value in my_dict.items():\\n    print(key, value)",\n              "example": null\n            },\n            {\n              "topic": "Dictionary Comprehensions",\n              "explain": "Similar to list comprehensions, dictionary comprehensions provide a concise way to create new dictionaries based on existing data. We\'ll learn how to use dictionary comprehensions to generate dictionaries based on specific criteria. You can use a Dictionary comprehension to reverse keys and values of a dictionary, or even construct a new one.",\n              "code": "numbers = [1, 2, 3, 4, 5]\\nsquares = {x: x**2 for x in numbers} # Creates a dictionary of squares",\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Tuples and Sets",\n          "content": [\n            {\n              "topic": "Tuples: Immutable Sequences",\n              "explain": "Tuples are ordered, immutable sequences of items. We\'ll learn how to create tuples, access elements by index, and understand their immutability. Tuples are more efficient to iterate through than lists. They are also hashable. Creating them is also less performance intensive.",\n              "code": "my_tuple = (1, 2, 3, \\"hello\\")\\nprint(my_tuple[0]) # Output: 1",\n              "example": null\n            },\n            {\n              "topic": "Sets: Unordered Unique Collections",\n              "explain": "Sets are unordered collections of unique items. We\'ll learn how to create sets, add or remove elements, and perform set operations like union, intersection, and difference. Sets are very performant at checking the presense of an element within the list. Sets can also be used to quickly remove duplicates.",\n              "code": "my_set = {1, 2, 3, 3}\\nmy_set.add(4)\\nmy_set.remove(1)",\n              "example": null\n            },\n            {\n              "topic": "Tuple Packing and Unpacking",\n              "explain": "Tuple packing involves creating a tuple by simply listing values separated by commas. Tuple unpacking involves assigning the values of a tuple to individual variables. This can be useful for returning multiple values from a function. Packing and unpacking are Python-specific constructs.",\n              "code": "x, y, z = 1, 2, 3 # Tuple packing and unpacking",\n              "example": null\n            },\n            {\n              "topic": "When to Use Tuples and Sets",\n              "explain": "We\'ll discuss the advantages of using tuples and sets over lists and dictionaries in specific scenarios. Tuples are preferred when immutability is required. Sets are preferred when ensuring unique elements and performing set operations. Choosing the appropriate Data type for each scenario allows for efficiency and readability.",\n              "code": null,\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Introduction to Object-Oriented Programming (OOP)",\n          "content": [\n            {\n              "topic": "Classes and Objects",\n              "explain": "A class is a blueprint for creating objects. An object is an instance of a class. We\'ll learn how to define classes, create objects, and understand the relationship between classes and objects. Classes are the foundation of OOP and provides a way to model real-world entities. Classes enable organizing data and behavior into cohesive units.",\n              "code": "class Dog:\\n    def __init__(self, name):\\n        self.name = name\\n\\nmy_dog = Dog(\\"Buddy\\") # Creates an object of the Dog class",\n              "example": null\n            },\n            {\n              "topic": "Attributes and Methods",\n              "explain": "Attributes are variables that store data associated with an object. Methods are functions that define the behavior of an object. We\'ll learn how to define attributes and methods within a class. Attributes represent the object\'s state and methods represent the object\'s behavior.  `self` is a reference to the instance of the class.",\n              "code": "class Dog:\\n    def __init__(self, name, breed):\\n        self.name = name\\n        self.breed = breed\\n\\n    def bark(self):\\n        print(\\"Woof!\\")",\n              "example": null\n            },\n            {\n              "topic": "The `__init__` Method",\n              "explain": "The `__init__` method is a special method called the constructor. It\'s automatically called when an object is created. We\'ll learn how to use the `__init__` method to initialize the attributes of an object. This method sets up the initial state of the object.",\n              "code": "class Dog:\\n    def __init__(self, name):\\n        self.name = name",\n              "example": null\n            },\n            {\n              "topic": "Encapsulation, Abstraction, Inheritance, and Polymorphism",\n              "explain": "OOP principles, Encapsulation binds the data and the methods that manipulate the data together. Abstraction hides complex implementation details and shows only the essential features of the object. Inheritance allows a class to inherit attributes and methods from another class. Polymorphism allows objects of different classes to be treated as objects of a common type. In summary these pillars make OOP robust and powerful.",\n              "code": null,\n              "example": null\n            }\n          ]\n        },\n        {\n          "chapterName": "Inheritance and Polymorphism",\n          "content": [\n            {\n              "topic": "Creating Subclasses",\n              "explain": "Inheritance allows you to create new classes (subclasses) based on existing classes (parent classes). Subclasses inherit attributes and methods from their parent classes.  This prevents code duplication and promotes code reusability.",\n              "code": "class Animal:\\n    def speak(self):\\n        print(\\"Generic animal sound\\")\\n\\nclass Dog(Animal):\\n    def speak(self):\\n        print(\\"Woof!\\")",\n              "example": null\n            },\n            {\n              "topic": "Overriding Methods",\n              "explain": "A subclass can override methods from its parent class to provide a specialized implementation. This allows you to customize the behavior of subclasses. This enables different behaviour across the class hierarchy.",\n              "code": "class Animal:\\n    def speak(self):\\n        print(\\"Generic animal sound\\")\\n\\nclass Dog(Animal):\\n    def speak(self):\\n        print(\\"Woof!\\")",\n              "example": null\n            },\n            {\n              "topic": "The `super()` Function",\n              "explain": "The `super()` function allows you to call methods from the parent class within a subclass.  This is useful for extending the functionality of parent class methods. `super()` allows calling methods from a super class from sub class.",\n              "code": "class Animal:\\n    def __init__(self, name):\\n        self.name = name\\n\\nclass Dog(Animal):\\n    def __init__(self, name, breed):\\n        super().__init__(name) # Calls the parent class constructor\\n        self.breed = breed",\n              "example": null\n            },\n            {\n              "topic": "Polymorphism: Many Forms",\n              "explain": "Polymorphism allows objects of different classes to be treated as objects of a common type. This provides flexibility and extensibility in your code. `duck typing` is how python approaches polymorphism by focusing more on presence of methods than their class hierarchy. It checks if the function exists, rather than the actual object type.",\n              "code": "class Animal:\\n    def speak(self):\\n        print(\\"Generic animal sound\\")\\n\\nclass Dog(Animal):\\n    def speak(self):\\n        print(\\"Woof!\\")\\n\\nclass Cat(Animal):\\n    def speak(self):\\n        print(\\"Meow!\\")\\n\\ndef animal_sound(animal):\\n    animal.speak() # Polymorphism in action",\n              "example": null\n            }\n          ]\n        }\n      ],\n      "quiz": [\n        {\n          "question": "Which data structure is an ordered, mutable collection?",\n          "options": ["Tuple", "Set", "List", "Dictionary"],\n          "correctAns": "List"\n        },\n        {\n          "question": "How do you access the element at index 2 in a list?",\n          "options": ["list(2)", "list[2]", "list.get(2)", "list.at(2)"],\n          "correctAns": "list[2]"\n        },\n        {\n          "question": "Which list method adds an element to the end of the list?",\n          "options": ["add()", "insert()", "append()", "extend()"],\n          "correctAns": "append()"\n        },\n        {\n          "question": "What is the purpose of list comprehension?",\n          "options": ["Sort a list", "Create a sublist", "Create a new list based on an existing list", "Remove elements from a list"],\n          "correctAns": "Create a new list based on an existing list"\n        },\n        {\n          "question": "Which data structure stores data in key-value pairs?",\n          "options": ["Tuple", "Set", "List", "Dictionary"],\n          "correctAns": "Dictionary"\n        },\n        {\n          "question": "Which dictionary method returns a view of all keys?",\n          "options": ["values()", "items()", "keys()", "get()"],\n          "correctAns": "keys()"\n        },\n        {\n          "question": "Which data structure is an ordered, immutable sequence?",\n          "options": ["List", "Set", "Tuple", "Dictionary"],\n          "correctAns": "Tuple"\n        },\n        {\n          "question": "Which data structure stores unordered unique elements?",\n          "options": ["List", "Set", "Tuple", "Dictionary"],\n          "correctAns": "Set"\n        },\n        {\n          "question": "What OOP principle allows a class to inherit attributes and methods from another class?",\n          "options": ["Encapsulation", "Abstraction", "Inheritance", "Polymorphism"],\n          "correctAns": "Inheritance"\n        },\n        {\n          "question": "Which OOP principle allows objects of different classes to be treated as objects of a common type?",\n          "options": ["Encapsulation", "Abstraction", "Inheritance", "Polymorphism"],\n          "correctAns": "Polymorphism"\n        }\n      ],\n      "flashcards": [\n        {\n          "front": "List",\n          "back": "Ordered, mutable collection"\n        },\n        '),
  ]),
];
